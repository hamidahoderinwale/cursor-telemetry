name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-javascript:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: javascript/package-lock.json
    
    - name: Install dependencies
      working-directory: ./javascript
      run: npm ci
    
    - name: Run linter
      working-directory: ./javascript
      run: npm run lint
    
    - name: Run tests
      working-directory: ./javascript
      run: npm test -- --coverage
    
    - name: Build package
      working-directory: ./javascript
      run: npm run build
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./javascript/coverage/lcov.info
        flags: javascript
        name: javascript-coverage

  test-python:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      working-directory: ./python
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run linter
      working-directory: ./python
      run: |
        flake8 cursor_telemetry
        black --check cursor_telemetry
        mypy cursor_telemetry
    
    - name: Run tests
      working-directory: ./python
      run: |
        pytest --cov=cursor_telemetry --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./python/coverage.xml
        flags: python
        name: python-coverage

  build-and-publish:
    needs: [test-javascript, test-python]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
        cache-dependency-path: javascript/package-lock.json
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install JavaScript dependencies
      working-directory: ./javascript
      run: npm ci
    
    - name: Install Python dependencies
      working-directory: ./python
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build JavaScript package
      working-directory: ./javascript
      run: npm run build
    
    - name: Build Python package
      working-directory: ./python
      run: python -m build
    
    - name: Publish to npm
      working-directory: ./javascript
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Publish to PyPI
      working-directory: ./python
      run: twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  docker-build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          cursor-telemetry/sdk:latest
          cursor-telemetry/sdk:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
